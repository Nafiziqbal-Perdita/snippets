{
  "Fastest inputOutput": {
    "prefix": "fast I/O",
    "body": [
      "#include <bits/stdc++.h>",
      "#define ll int64_t",
      "#define magical_moment                \\",
      "    ios_base::sync_with_stdio(false); \\",
      "    cin.tie(0);",
      "#define i32 int32_t",
      "#define i64 int64_t",
      "// size",
      "#define ln(x) x.size()",
      "// check the number of 1's in a number in binary form;((ll for long long integer))",
      "#define popcount(x) __builtin_popcount(x)",
      "#define popcountll(x) __builtin_popcountll(x)",
      "// check the leading zeros of a number in binary form;((ll for long long integer))",
      "#define clz(x) __builtin_clz(x)",
      "#define clzll(x) __builtin_clzll(x)",
      "// check the trailing zeros of a number in binary form;((ll for long long integer))",
      "#define ctz(x) __builtin_ctz(x)",
      "#define ctzll(x) __builtin_ctzll(x)",
      "// decimal to binary and binary to decimal",
      "#define dec_to_bin(x) bitset<32>(x).to_string()",
      "#define bin_to_dec(x) stoi(x, 0, 2)",
      "// substring of a string l=left index , r=how many characters should print from n;",
      "#define substr(l_indx, number_of_characters) substr(l_indx, number_of_characters)",
      "// print a integer in binary form",
      "#define make_binary(x) dec_to_bin(x).substr(clz(x), ln(dec_to_bin(x)) - 1)",
      "// Heap Section",
      "#define min_heap priority_queue<int, vector<int>, greater<int>>",
      "#define max_heap priority_queue<int>",
      "// taking input in vector;",
      "#define vcin(x)       \\",
      "    for (auto &i : x) \\",
      "    cin >> i",
      "// test case",
      "#define testCase       \\",
      "    int64_t test_case; \\",
      "    cin >> test_case;  \\",
      "    while (test_case--)",
      "",
      "// pairs",
      "#define pair pair<int, int>",
      "#define endl '\\n'",
      "using namespace std;",
      "const int N = 2e6 + 11;",
      "/**Function space**/",
      "",
      "/**Function space**/",
      "",
      "/********** Game Start From Here **********/",
      "int main()",
      "{",
      "magical_moment",
      "//test Case Placed here",
      "",
      "",
      "    {",
      "",
      "",
      "",
      "",
      "$0",
      "",
      "",
      "",
      "",
      "    }",
      "",
      "    return 0;",
      "}"
    ],
    "description": "Fastest inputOutput"
  },

  "Number of divisor of a number": {
    "prefix": "generate number_of_divisors",
    "body": [
      "int numofDiv(int num) // O(n^1/3)",
      "{",
      "    int divisors = 0;",
      "    for (ll i = 1; i * i <= num; i++)",
      "    {",
      "        if (num % i == 0)",
      "        {",
      "            divisors++;",
      "            if (num / i != i)",
      "            {",
      "                divisors++;",
      "            }",
      "        }",
      "    }",
      "    return divisors;",
      "}"
    ],
    "description": "Number of divisor of a number"
  },

  "Sum of divisor of a number": {
    "prefix": "generate sum_of_divisors",
    "body": [
      "",
      "int sumofDiv(int num)",
      "{",
      "    int sum = 0;",
      "    for (int i = 1; i * i <= num; i++)",
      "    {",
      "        if (num % i == 0)",
      "        {",
      "            sum += i;",
      "            if (num / i != i)",
      "            {",
      "                sum += num / i;",
      "            }",
      "        }",
      "    }",
      "    return sum;",
      "}"
    ],
    "description": "Sum of divisor of a number"
  },
  "f": {
    "prefix": "generate get_divisors",
    "body": [
      "vector<int> listOfDiv(int num)",
      "{",
      "    vector<int> divisors;",
      "    for (int i = 1; i * i <= num; i++)",
      "    {",
      "        if (num % i == 0)",
      "        {",
      "            divisors.push_back(i);",
      "            if (num / i != i)",
      "            {",
      "                divisors.push_back(num / i);",
      "            }",
      "        }",
      "    }",
      "    return divisors;",
      "}"
    ],
    "description": ""
  },
  "a": {
    "prefix": "generate check_primes",
    "body": [
      "bool isPrime(int num)",
      "{",
      "    if (num < 2)",
      "    {",
      "        return false;",
      "    }",
      "    if (num == 2)",
      "    {",
      "        return true;",
      "    }",
      "    if (num % 2 == 0)",
      "    {",
      "        return false;",
      "    }",
      "    for (int i = 3; i * i <= num; i += 2)",
      "    {",
      "        if (num % i == 0)",
      "            return false;",
      "    }",
      "    return true;",
      "}"
    ],
    "description": ""
  },
  "b": {
    "prefix": "generate sieve",
    "body": [
      "vector<int> primes;",
      "vector<bool> isPrime(N + 5, true);",
      "void primeOfsieve()",
      "{",
      "    isPrime[0] = isPrime[1] = false;",
      "    for (int i = 4; i <= N; i += 2)",
      "    {",
      "        isPrime[i] = false;",
      "    }",
      "    for (int i = 3; i * i <= N; i += 2)",
      "    {",
      "        if (isPrime[i])",
      "        {",
      "            for (int j = i * i; j <= N; j += i * 2)",
      "            {",
      "                isPrime[j] = false;",
      "            }",
      "        }",
      "    }",
      "    primes.push_back(2);",
      "    for (int i = 3; i <= N; i += 2)",
      "    {",
      "        if (isPrime[i])",
      "        {",
      "            primes.push_back(i);",
      "        }",
      "    }",
      "}"
    ],
    "description": ""
  },
  "c": {
    "prefix": "generate total_number_divisios",
    "body": [
      "int nod[N + 5];",
      "void divcount()",
      "{",
      "    for (int i = 1; i <= N; i++)",
      "    {",
      "        for (int j = i; j <= N; j += i)",
      "        {",
      "            nod[j]++;",
      "        }",
      "    }",
      "}"
    ],
    "description": ""
  },
  "d": {
    "prefix": "generate total_sum_of_divisior",
    "body": [
      "int nod[N + 5];",
      "void divcount()",
      "{",
      "    for (int i = 1; i <= N; i++)",
      "    {",
      "        for (int j = i; j <= N; j += i)",
      "        {",
      "            nod[j]++;",
      "        }",
      "    }",
      "}"
    ],
    "description": ""
  },
  "e": {
    "prefix": "generate gcd",
    "body": [
      "int gosagu(ll a ll b)",
      "{",
      "    if (b == 0)",
      "        return a;",
      "    return gosagu(b a % b);",
      "}"
    ],
    "description": ""
  },
  "g": {
    "prefix": "generate lcm",
    "body": [
      "",
      "",
      "int losagu(int a int b)",
      "{",
      "    return a / __gcd(a b) * b;",
      "}",
      ""
    ],
    "description": "This a c++ code"
  },
  "prime factor of a number": {
    "prefix": "generate prime factor",
    "body": [
      "vector<i64> factorization(i64 n)",
      "{",
      "    vector<i64> first_primes;",
      "",
      "    if (n == 1)",
      "        return first_primes;",
      "",
      "    for (i64 d = 1, i = 2; i * i <= n && first_primes.size() <= N; i += d, d = 2)",
      "    {",
      "        while (n % i == 0)",
      "            first_primes.push_back(i), n /= i;",
      "    }",
      "",
      "    if (n > 1)",
      "        first_primes.push_back(n);",
      "",
      "    return first_primes;",
      "}"
    ],
    "description": "prime factor of a number"
  },
  "i": {
    "prefix": "generate power_of a number",
    "body": [
      "",
      "ll make_power(ll a ,ll b) // O(log b)",
      "{",
      "    ll pow = 1;",
      "    while (b)",
      "    {",
      "        if (b & 1)",
      "        {",
      "            pow = pow * a;",
      "            --b;",
      "        }",
      "        a = a * a;",
      "        b = b / 2;",
      "    }",
      "    return pow;",
      "}"
    ],
    "description": "This a c++ code"
  },
  "j": {
    "prefix": "generate mod_power_of a number",
    "body": [
      "i64 power_mod(i64 x, i64 y, i64 p)",
      "{",
      "   ll res = 1;",
      "  ",
      "    x = x % p; ",
      "    if (x == 0) return 0;",
      "  ",
      "    while (y > 0)  ",
      "    {  ",
      "        if (y & 1) res = ((__int128)res*x) % p;",
      "  ",
      "        x = ((__int128)x*x) % p;  ",
      "        y = y>>1;",
      "    }  ",
      "    return res;  ",
      "}"
    ],
    "description": "This a c++ code"
  },
  "k": {
    "prefix": "generate pair_and_exponent of a number",
    "body": [
      "// Returns the complete list of (factor  exponent) pairs",
      "vector<pair<int int>> prime_factorize_as_pair(int n)",
      "{",
      "    vector<pair<int int>> result;",
      "    for (int p : primes)",
      "    {",
      "        if (p * p > n)",
      "            break;",
      "        if (n % p == 0)",
      "        {",
      "            int expo = 0;",
      "            while (n % p == 0)",
      "            {",
      "                ++expo;",
      "                n /= p;",
      "            }",
      "            result.push_back(make_pair(p expo));",
      "        }",
      "    }",
      "    if (n != 1)",
      "    {",
      "        result.push_back(make_pair(n 1));",
      "    }",
      "    return result;",
      "}"
    ],
    "description": "This a c++ code"
  },
  "l": {
    "prefix": "generate binarySearch_if the value exist",
    "body": [
      "",
      "bool binarySearch(ll val vector<ll> v)",
      "{",
      "    ll lo = 0 hi = v.size() - 1;",
      "    while (lo <= hi)",
      "    {",
      "        ll mid = (lo + hi) / 2;",
      "        if (v[mid] == val)",
      "        {",
      "            return true;",
      "        }",
      "        else if (v[mid] > val)",
      "        {",
      "            hi = mid - 1;",
      "        }",
      "        else if (v[mid] < val)",
      "        {",
      "            lo = mid + 1;",
      "        }",
      "    }",
      "    return false;",
      "}"
    ],
    "description": "This a c++ code"
  },
  "m": {
    "prefix": "generate binarySearch_index of the value",
    "body": [
      "",
      "// returns any index of val if exists  -1 otherwise",
      "int binarySearch(ll val vector<ll> v)",
      "{",
      "    ll lo = 0 hi = v.size() - 1;",
      "    while (lo <= hi)",
      "    {",
      "        ll mid = (lo + hi) / 2;",
      "        if (v[mid] == val)",
      "        {",
      "            return mid;",
      "        }",
      "        else if (v[mid] > val)",
      "        {",
      "            hi = mid - 1;",
      "        }",
      "        else if (v[mid] < val)",
      "        {",
      "            lo = mid + 1;",
      "        }",
      "    }",
      "    return -1;",
      "}"
    ],
    "description": "This a c++ code"
  },
  "n": {
    "prefix": "generate binarySearch_first Occurance of the value",
    "body": [
      "",
      "// returns the first index of val if exists  -1 otherwise",
      "int binarySearch(int val vector<int> v)",
      "{",
      "    int lo = 0 hi = v.size() - 1 first_idx = -1;",
      "    while (lo <= hi)",
      "    {",
      "        int mid = (lo + hi) / 2;",
      "        if (v[mid] == val)",
      "        {",
      "            first_idx = mid;",
      "            hi = mid - 1;",
      "        }",
      "        else if (v[mid] > val)",
      "        {",
      "            hi = mid - 1;",
      "        }",
      "        else if (v[mid] < val)",
      "        {",
      "            lo = mid + 1;",
      "        }",
      "    }",
      "    return first_idx;",
      "}"
    ],
    "description": "This is a c++ code"
  },
  "o": {
    "prefix": "generate binarySearch_last Occurance of the value",
    "body": [
      "",
      "// returns the last index of val if exists  -1 otherwise",
      "int binarySearch(int val vector<ll> v)",
      "{",
      "    ll lo = 0 hi = v.size() - 1 last_idx = -1;",
      "    while (lo <= hi)",
      "    {",
      "        ll mid = (lo + hi) / 2;",
      "        if (v[mid] == val)",
      "        {",
      "            last_idx = mid;",
      "            lo = mid + 1;",
      "        }",
      "        else if (v[mid] > val)",
      "        {",
      "            hi = mid - 1;",
      "        }",
      "        else if (v[mid] < val)",
      "        {",
      "            lo = mid + 1;",
      "        }",
      "    }",
      "    return last_idx;",
      "}"
    ],
    "description": "This is a c++ code"
  },

  "p": {
    "prefix": "twin",
    "body": [
      "#include <bits/stdc++.h>",
      "#define ll int64_t",
      "#define magical_moment                \\",
      "    ios_base::sync_with_stdio(false); \\",
      "    cin.tie(0);",
      "#define endl '\\n'",
      "using namespace std;",
      "const int N = 2e6 + 11;",
      "",
      "/********** Game Never Ends **********/",
      "/********** CHOLO BANGLADESH **********/",
      "void its_perdita()",
      "{",
      "",
      "",
      "",
      "",
      "",
      "",
      "$0",
      "",
      "",
      "",
      "}",
      "/********** Main()  function **********/",
      "int main()",
      "{",
      "    magical_moment;",
      "    int test_case = 1;",
      "    // cin>>test_case;",
      "    for (int i = 1; i <= test_case; i++)",
      "    {",
      "        // cout<<",
      "        its_perdita();",
      "    }",
      "    return 0;",
      "}"
    ],
    "description": "This is a c++ code"
  },

  "q": {
    "prefix": "generate longest prefix string",
    "body": [
      "vector<i32> longestPrefixString(string &s)",
      "{",
      "    vector<i32> v(ln(s), 0);",
      "    i32 l = 0, r = 1;",
      "    while (r < ln(s))",
      "    {",
      "        if (s[l] == s[r])",
      "        {",
      "            v[r] = l + 1;",
      "            l++, r++;",
      "        }",
      "        else",
      "        {",
      "            if (l == 0)",
      "            {",
      "                v[r] = 0;",
      "                r++;",
      "                continue;",
      "            }",
      "            l = v[l - 1];",
      "        }",
      "    }",
      "    return v;",
      "}"
    ],
    "description": "Longest Prefix String Storing"
  },
  "r": {
    "prefix": "generate longest common subsequences",
    "body": [
      "",
      "i32 longestCommonSubsequence(string &X, string &Y)",
      "{",
      "",
      "    i32 m = ln(X), n = ln(Y);",
      "    i32 L[m + 1][n + 1];",
      "    for (i32 i = 0; i <= m; i++)",
      "    {",
      "        for (i32 j = 0; j <= n; j++)",
      "        {",
      "            if (i == 0 || j == 0)",
      "                L[i][j] = 0;",
      "",
      "            else if (X[i - 1] == Y[j - 1])",
      "                L[i][j] = L[i - 1][j - 1] + 1;",
      "",
      "            else",
      "                L[i][j] = max(L[i - 1][j], L[i][j - 1]);",
      "        }",
      "    }",
      "",
      "    return L[m][n];",
      "    // Following code is used to print LCS",
      "    i32 index = L[m][n];",
      "",
      "    // for getting the string firt change the return type of the function from i32 to string then comment the  L[m][n] and then remove the comment of string making part;",
      "",
      "    // Create a character array to store the lcs string",
      "    // char lcs[index + 1];",
      "    // lcs[index] = '\\0'; // Set the terminating character",
      "    // i32 i = m, j = n;",
      "    // while (i > 0 && j > 0)",
      "    // {",
      "    //     if (X[i - 1] == Y[j - 1])",
      "    //     {",
      "    //         lcs[index - 1] = X[i - 1];",
      "    //         i--;",
      "    //         j--;",
      "    //         index--;",
      "    //     }",
      "",
      "    //     else if (L[i - 1][j] > L[i][j - 1])",
      "    //         i--;",
      "    //     else",
      "    //         j--;",
      "    // }",
      "    // return lcs;",
      "}",
      ""
    ],
    "description": "Longest Common Subsequence"
  }
}
